/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace BusinessObjects
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class NewsEventInfo : TBase
  {
    private string _Currency;
    private string _Name;
    private sbyte _Importance;
    private string _RaiseDateTime;

    public string Currency
    {
      get
      {
        return _Currency;
      }
      set
      {
        __isset.Currency = true;
        this._Currency = value;
      }
    }

    public string Name
    {
      get
      {
        return _Name;
      }
      set
      {
        __isset.Name = true;
        this._Name = value;
      }
    }

    public sbyte Importance
    {
      get
      {
        return _Importance;
      }
      set
      {
        __isset.Importance = true;
        this._Importance = value;
      }
    }

    public string RaiseDateTime
    {
      get
      {
        return _RaiseDateTime;
      }
      set
      {
        __isset.RaiseDateTime = true;
        this._RaiseDateTime = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool Currency;
      public bool Name;
      public bool Importance;
      public bool RaiseDateTime;
    }

    public NewsEventInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Currency = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Byte) {
              Importance = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              RaiseDateTime = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("NewsEventInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Currency != null && __isset.Currency) {
        field.Name = "Currency";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Currency);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.Name) {
        field.Name = "Name";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (__isset.Importance) {
        field.Name = "Importance";
        field.Type = TType.Byte;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(Importance);
        oprot.WriteFieldEnd();
      }
      if (RaiseDateTime != null && __isset.RaiseDateTime) {
        field.Name = "RaiseDateTime";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(RaiseDateTime);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("NewsEventInfo(");
      bool __first = true;
      if (Currency != null && __isset.Currency) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Currency: ");
        __sb.Append(Currency);
      }
      if (Name != null && __isset.Name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (__isset.Importance) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Importance: ");
        __sb.Append(Importance);
      }
      if (RaiseDateTime != null && __isset.RaiseDateTime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RaiseDateTime: ");
        __sb.Append(RaiseDateTime);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
