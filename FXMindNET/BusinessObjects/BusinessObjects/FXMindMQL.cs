/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace BusinessObjects
{
  public partial class FXMindMQL {
    /// <summary>
    /// Ahh, now onto the cool part, defining a service. Services just need a name
    /// and can optionally inherit from another service using the extends keyword.
    /// </summary>
    public interface Iface {
      List<string> ProcessStringData(Dictionary<string, string> paramsList, List<string> inputData);
      #if SILVERLIGHT
      IAsyncResult Begin_ProcessStringData(AsyncCallback callback, object state, Dictionary<string, string> paramsList, List<string> inputData);
      List<string> End_ProcessStringData(IAsyncResult asyncResult);
      #endif
      List<double> ProcessDoubleData(Dictionary<string, string> paramsList, List<string> inputData);
      #if SILVERLIGHT
      IAsyncResult Begin_ProcessDoubleData(AsyncCallback callback, object state, Dictionary<string, string> paramsList, List<string> inputData);
      List<double> End_ProcessDoubleData(IAsyncResult asyncResult);
      #endif
      long IsServerActive(Dictionary<string, string> paramsList);
      #if SILVERLIGHT
      IAsyncResult Begin_IsServerActive(AsyncCallback callback, object state, Dictionary<string, string> paramsList);
      long End_IsServerActive(IAsyncResult asyncResult);
      #endif
      void PostStatusMessage(Dictionary<string, string> paramsList);
      #if SILVERLIGHT
      IAsyncResult Begin_PostStatusMessage(AsyncCallback callback, object state, Dictionary<string, string> paramsList);
      void End_PostStatusMessage(IAsyncResult asyncResult);
      #endif
    }

    /// <summary>
    /// Ahh, now onto the cool part, defining a service. Services just need a name
    /// and can optionally inherit from another service using the extends keyword.
    /// </summary>
    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_ProcessStringData(AsyncCallback callback, object state, Dictionary<string, string> paramsList, List<string> inputData)
      {
        return send_ProcessStringData(callback, state, paramsList, inputData);
      }

      public List<string> End_ProcessStringData(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ProcessStringData();
      }

      #endif

      public List<string> ProcessStringData(Dictionary<string, string> paramsList, List<string> inputData)
      {
        #if !SILVERLIGHT
        send_ProcessStringData(paramsList, inputData);
        return recv_ProcessStringData();

        #else
        var asyncResult = Begin_ProcessStringData(null, null, paramsList, inputData);
        return End_ProcessStringData(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ProcessStringData(AsyncCallback callback, object state, Dictionary<string, string> paramsList, List<string> inputData)
      #else
      public void send_ProcessStringData(Dictionary<string, string> paramsList, List<string> inputData)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ProcessStringData", TMessageType.Call, seqid_));
        ProcessStringData_args args = new ProcessStringData_args();
        args.ParamsList = paramsList;
        args.InputData = inputData;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<string> recv_ProcessStringData()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ProcessStringData_result result = new ProcessStringData_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ProcessStringData failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ProcessDoubleData(AsyncCallback callback, object state, Dictionary<string, string> paramsList, List<string> inputData)
      {
        return send_ProcessDoubleData(callback, state, paramsList, inputData);
      }

      public List<double> End_ProcessDoubleData(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ProcessDoubleData();
      }

      #endif

      public List<double> ProcessDoubleData(Dictionary<string, string> paramsList, List<string> inputData)
      {
        #if !SILVERLIGHT
        send_ProcessDoubleData(paramsList, inputData);
        return recv_ProcessDoubleData();

        #else
        var asyncResult = Begin_ProcessDoubleData(null, null, paramsList, inputData);
        return End_ProcessDoubleData(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ProcessDoubleData(AsyncCallback callback, object state, Dictionary<string, string> paramsList, List<string> inputData)
      #else
      public void send_ProcessDoubleData(Dictionary<string, string> paramsList, List<string> inputData)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ProcessDoubleData", TMessageType.Call, seqid_));
        ProcessDoubleData_args args = new ProcessDoubleData_args();
        args.ParamsList = paramsList;
        args.InputData = inputData;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<double> recv_ProcessDoubleData()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ProcessDoubleData_result result = new ProcessDoubleData_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ProcessDoubleData failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_IsServerActive(AsyncCallback callback, object state, Dictionary<string, string> paramsList)
      {
        return send_IsServerActive(callback, state, paramsList);
      }

      public long End_IsServerActive(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_IsServerActive();
      }

      #endif

      public long IsServerActive(Dictionary<string, string> paramsList)
      {
        #if !SILVERLIGHT
        send_IsServerActive(paramsList);
        return recv_IsServerActive();

        #else
        var asyncResult = Begin_IsServerActive(null, null, paramsList);
        return End_IsServerActive(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_IsServerActive(AsyncCallback callback, object state, Dictionary<string, string> paramsList)
      #else
      public void send_IsServerActive(Dictionary<string, string> paramsList)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("IsServerActive", TMessageType.Call, seqid_));
        IsServerActive_args args = new IsServerActive_args();
        args.ParamsList = paramsList;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_IsServerActive()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        IsServerActive_result result = new IsServerActive_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "IsServerActive failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PostStatusMessage(AsyncCallback callback, object state, Dictionary<string, string> paramsList)
      {
        return send_PostStatusMessage(callback, state, paramsList);
      }

      public void End_PostStatusMessage(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
      }

      #endif

      public void PostStatusMessage(Dictionary<string, string> paramsList)
      {
        #if !SILVERLIGHT
        send_PostStatusMessage(paramsList);

        #else
        var asyncResult = Begin_PostStatusMessage(null, null, paramsList);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PostStatusMessage(AsyncCallback callback, object state, Dictionary<string, string> paramsList)
      #else
      public void send_PostStatusMessage(Dictionary<string, string> paramsList)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PostStatusMessage", TMessageType.Call, seqid_));
        PostStatusMessage_args args = new PostStatusMessage_args();
        args.ParamsList = paramsList;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["ProcessStringData"] = ProcessStringData_Process;
        processMap_["ProcessDoubleData"] = ProcessDoubleData_Process;
        processMap_["IsServerActive"] = IsServerActive_Process;
        processMap_["PostStatusMessage"] = PostStatusMessage_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void ProcessStringData_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ProcessStringData_args args = new ProcessStringData_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ProcessStringData_result result = new ProcessStringData_result();
        result.Success = iface_.ProcessStringData(args.ParamsList, args.InputData);
        oprot.WriteMessageBegin(new TMessage("ProcessStringData", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ProcessDoubleData_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ProcessDoubleData_args args = new ProcessDoubleData_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ProcessDoubleData_result result = new ProcessDoubleData_result();
        result.Success = iface_.ProcessDoubleData(args.ParamsList, args.InputData);
        oprot.WriteMessageBegin(new TMessage("ProcessDoubleData", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void IsServerActive_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        IsServerActive_args args = new IsServerActive_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        IsServerActive_result result = new IsServerActive_result();
        result.Success = iface_.IsServerActive(args.ParamsList);
        oprot.WriteMessageBegin(new TMessage("IsServerActive", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PostStatusMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PostStatusMessage_args args = new PostStatusMessage_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        iface_.PostStatusMessage(args.ParamsList);
        return;
      }
    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ProcessStringData_args : TBase
    {
      private Dictionary<string, string> _paramsList;
      private List<string> _inputData;

      public Dictionary<string, string> ParamsList
      {
        get
        {
          return _paramsList;
        }
        set
        {
          __isset.paramsList = true;
          this._paramsList = value;
        }
      }

      public List<string> InputData
      {
        get
        {
          return _inputData;
        }
        set
        {
          __isset.inputData = true;
          this._inputData = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool paramsList;
        public bool inputData;
      }

      public ProcessStringData_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map) {
                {
                  ParamsList = new Dictionary<string, string>();
                  TMap _map0 = iprot.ReadMapBegin();
                  for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
                  {
                    string _key2;
                    string _val3;
                    _key2 = iprot.ReadString();
                    _val3 = iprot.ReadString();
                    ParamsList[_key2] = _val3;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  InputData = new List<string>();
                  TList _list4 = iprot.ReadListBegin();
                  for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                  {
                    string _elem6 = null;
                    _elem6 = iprot.ReadString();
                    InputData.Add(_elem6);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ProcessStringData_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ParamsList != null && __isset.paramsList) {
          field.Name = "paramsList";
          field.Type = TType.Map;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, ParamsList.Count));
            foreach (string _iter7 in ParamsList.Keys)
            {
              oprot.WriteString(_iter7);
              oprot.WriteString(ParamsList[_iter7]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (InputData != null && __isset.inputData) {
          field.Name = "inputData";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, InputData.Count));
            foreach (string _iter8 in InputData)
            {
              oprot.WriteString(_iter8);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ProcessStringData_args(");
        bool __first = true;
        if (ParamsList != null && __isset.paramsList) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ParamsList: ");
          __sb.Append(ParamsList);
        }
        if (InputData != null && __isset.inputData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("InputData: ");
          __sb.Append(InputData);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ProcessStringData_result : TBase
    {
      private List<string> _success;

      public List<string> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ProcessStringData_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list9 = iprot.ReadListBegin();
                  for( int _i10 = 0; _i10 < _list9.Count; ++_i10)
                  {
                    string _elem11 = null;
                    _elem11 = iprot.ReadString();
                    Success.Add(_elem11);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ProcessStringData_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter12 in Success)
              {
                oprot.WriteString(_iter12);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ProcessStringData_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ProcessDoubleData_args : TBase
    {
      private Dictionary<string, string> _paramsList;
      private List<string> _inputData;

      public Dictionary<string, string> ParamsList
      {
        get
        {
          return _paramsList;
        }
        set
        {
          __isset.paramsList = true;
          this._paramsList = value;
        }
      }

      public List<string> InputData
      {
        get
        {
          return _inputData;
        }
        set
        {
          __isset.inputData = true;
          this._inputData = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool paramsList;
        public bool inputData;
      }

      public ProcessDoubleData_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map) {
                {
                  ParamsList = new Dictionary<string, string>();
                  TMap _map13 = iprot.ReadMapBegin();
                  for( int _i14 = 0; _i14 < _map13.Count; ++_i14)
                  {
                    string _key15;
                    string _val16;
                    _key15 = iprot.ReadString();
                    _val16 = iprot.ReadString();
                    ParamsList[_key15] = _val16;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  InputData = new List<string>();
                  TList _list17 = iprot.ReadListBegin();
                  for( int _i18 = 0; _i18 < _list17.Count; ++_i18)
                  {
                    string _elem19 = null;
                    _elem19 = iprot.ReadString();
                    InputData.Add(_elem19);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ProcessDoubleData_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ParamsList != null && __isset.paramsList) {
          field.Name = "paramsList";
          field.Type = TType.Map;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, ParamsList.Count));
            foreach (string _iter20 in ParamsList.Keys)
            {
              oprot.WriteString(_iter20);
              oprot.WriteString(ParamsList[_iter20]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (InputData != null && __isset.inputData) {
          field.Name = "inputData";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, InputData.Count));
            foreach (string _iter21 in InputData)
            {
              oprot.WriteString(_iter21);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ProcessDoubleData_args(");
        bool __first = true;
        if (ParamsList != null && __isset.paramsList) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ParamsList: ");
          __sb.Append(ParamsList);
        }
        if (InputData != null && __isset.inputData) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("InputData: ");
          __sb.Append(InputData);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ProcessDoubleData_result : TBase
    {
      private List<double> _success;

      public List<double> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ProcessDoubleData_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<double>();
                  TList _list22 = iprot.ReadListBegin();
                  for( int _i23 = 0; _i23 < _list22.Count; ++_i23)
                  {
                    double _elem24 = (double)0;
                    _elem24 = iprot.ReadDouble();
                    Success.Add(_elem24);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ProcessDoubleData_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Double, Success.Count));
              foreach (double _iter25 in Success)
              {
                oprot.WriteDouble(_iter25);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ProcessDoubleData_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class IsServerActive_args : TBase
    {
      private Dictionary<string, string> _paramsList;

      public Dictionary<string, string> ParamsList
      {
        get
        {
          return _paramsList;
        }
        set
        {
          __isset.paramsList = true;
          this._paramsList = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool paramsList;
      }

      public IsServerActive_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map) {
                {
                  ParamsList = new Dictionary<string, string>();
                  TMap _map26 = iprot.ReadMapBegin();
                  for( int _i27 = 0; _i27 < _map26.Count; ++_i27)
                  {
                    string _key28;
                    string _val29;
                    _key28 = iprot.ReadString();
                    _val29 = iprot.ReadString();
                    ParamsList[_key28] = _val29;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IsServerActive_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ParamsList != null && __isset.paramsList) {
          field.Name = "paramsList";
          field.Type = TType.Map;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, ParamsList.Count));
            foreach (string _iter30 in ParamsList.Keys)
            {
              oprot.WriteString(_iter30);
              oprot.WriteString(ParamsList[_iter30]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("IsServerActive_args(");
        bool __first = true;
        if (ParamsList != null && __isset.paramsList) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ParamsList: ");
          __sb.Append(ParamsList);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class IsServerActive_result : TBase
    {
      private long _success;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public IsServerActive_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("IsServerActive_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("IsServerActive_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PostStatusMessage_args : TBase
    {
      private Dictionary<string, string> _paramsList;

      public Dictionary<string, string> ParamsList
      {
        get
        {
          return _paramsList;
        }
        set
        {
          __isset.paramsList = true;
          this._paramsList = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool paramsList;
      }

      public PostStatusMessage_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Map) {
                {
                  ParamsList = new Dictionary<string, string>();
                  TMap _map31 = iprot.ReadMapBegin();
                  for( int _i32 = 0; _i32 < _map31.Count; ++_i32)
                  {
                    string _key33;
                    string _val34;
                    _key33 = iprot.ReadString();
                    _val34 = iprot.ReadString();
                    ParamsList[_key33] = _val34;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("PostStatusMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ParamsList != null && __isset.paramsList) {
          field.Name = "paramsList";
          field.Type = TType.Map;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, ParamsList.Count));
            foreach (string _iter35 in ParamsList.Keys)
            {
              oprot.WriteString(_iter35);
              oprot.WriteString(ParamsList[_iter35]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("PostStatusMessage_args(");
        bool __first = true;
        if (ParamsList != null && __isset.paramsList) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ParamsList: ");
          __sb.Append(ParamsList);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
